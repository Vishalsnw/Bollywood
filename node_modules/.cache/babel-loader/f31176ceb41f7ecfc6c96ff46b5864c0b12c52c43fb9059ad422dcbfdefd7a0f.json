{"ast":null,"code":"// src/features/game/gameLogic.js\n\n// Helper to generate a random integer between min and max (inclusive)\nfunction randInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// Generate a random movie title\nfunction generateMovieTitle(producerName, year) {\n  const adjectives = [\"Super\", \"Mega\", \"Ultimate\", \"Dhamaka\", \"Blockbuster\", \"Dream\", \"Secret\", \"Golden\"];\n  const nouns = [\"Journey\", \"Hero\", \"Queen\", \"King\", \"Saga\", \"Mystery\", \"Love\", \"Star\"];\n  return `${adjectives[randInt(0, adjectives.length - 1)]} ${nouns[randInt(0, nouns.length - 1)]} (${producerName.split(\" \")[0]}) ${year}`;\n}\n\n// Main game logic for one year\nexport function playYear(state) {\n  let movies = [];\n  let news = [];\n  let producers = state.producers.map(p => ({\n    ...p\n  }));\n\n  // Each producer may produce 1 movie with some random stats\n  producers.forEach(producer => {\n    if (!producer.isActive) return;\n    // Decide if producer releases a movie this year (80% chance)\n    if (Math.random() < 0.8) {\n      const budget = randInt(50000, 250000); // Random budget\n      const earnings = randInt(0, budget * 3); // Random box office\n      const movie = {\n        id: `${producer.id}-${state.year}`,\n        title: generateMovieTitle(producer.name, state.year),\n        producerId: producer.id,\n        producerName: producer.name,\n        year: state.year,\n        budget,\n        earnings\n      };\n      movies.push(movie);\n      producer.movies.push(movie);\n      producer.wealth += earnings - budget;\n      producer.netWorthHistory.push(producer.wealth);\n    } else {\n      producer.netWorthHistory.push(producer.wealth);\n    }\n  });\n\n  // Oscar selection: Top earning movie\n  let oscarWinner = null;\n  if (movies.length > 0) {\n    oscarWinner = movies.reduce((best, curr) => curr.earnings > best.earnings ? curr : best, movies[0]);\n    let winnerProducer = producers.find(p => p.id === oscarWinner.producerId);\n    if (winnerProducer) winnerProducer.oscars += 1;\n    news.push({\n      type: \"oscar\",\n      text: `🏆 Oscar Winner: \"${oscarWinner.title}\" by ${oscarWinner.producerName} (${oscarWinner.earnings.toLocaleString()} INR)`,\n      year: state.year\n    });\n  }\n\n  // News: Top flop, top hit, richest producer\n  if (movies.length > 0) {\n    const topHit = movies.reduce((a, b) => a.earnings > b.earnings ? a : b);\n    const topFlop = movies.reduce((a, b) => a.earnings < b.earnings ? a : b);\n    news.push({\n      type: \"hit\",\n      text: `🔥 Blockbuster: \"${topHit.title}\" earned ${topHit.earnings.toLocaleString()} INR!`,\n      year: state.year\n    });\n    news.push({\n      type: \"flop\",\n      text: `💸 Flop: \"${topFlop.title}\" earned only ${topFlop.earnings.toLocaleString()} INR.`,\n      year: state.year\n    });\n  }\n  const richest = producers.reduce((a, b) => a.wealth > b.wealth ? a : b);\n  news.push({\n    type: \"richest\",\n    text: `💰 Richest Producer: ${richest.name} (${richest.wealth.toLocaleString()} INR)`,\n    year: state.year\n  });\n  return {\n    movies,\n    oscars: oscarWinner,\n    news,\n    producers\n  };\n}\n\n// end of code","map":{"version":3,"names":["randInt","min","max","Math","floor","random","generateMovieTitle","producerName","year","adjectives","nouns","length","split","playYear","state","movies","news","producers","map","p","forEach","producer","isActive","budget","earnings","movie","id","title","name","producerId","push","wealth","netWorthHistory","oscarWinner","reduce","best","curr","winnerProducer","find","oscars","type","text","toLocaleString","topHit","a","b","topFlop","richest"],"sources":["/data/data/com.termux/files/home/Bollywood/src/features/game/gameLogic.js"],"sourcesContent":["// src/features/game/gameLogic.js\n\n// Helper to generate a random integer between min and max (inclusive)\nfunction randInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// Generate a random movie title\nfunction generateMovieTitle(producerName, year) {\n  const adjectives = [\"Super\", \"Mega\", \"Ultimate\", \"Dhamaka\", \"Blockbuster\", \"Dream\", \"Secret\", \"Golden\"];\n  const nouns = [\"Journey\", \"Hero\", \"Queen\", \"King\", \"Saga\", \"Mystery\", \"Love\", \"Star\"];\n  return `${adjectives[randInt(0, adjectives.length - 1)]} ${nouns[randInt(0, nouns.length - 1)]} (${producerName.split(\" \")[0]}) ${year}`;\n}\n\n// Main game logic for one year\nexport function playYear(state) {\n  let movies = [];\n  let news = [];\n  let producers = state.producers.map(p => ({ ...p }));\n\n  // Each producer may produce 1 movie with some random stats\n  producers.forEach(producer => {\n    if (!producer.isActive) return;\n    // Decide if producer releases a movie this year (80% chance)\n    if (Math.random() < 0.8) {\n      const budget = randInt(50000, 250000); // Random budget\n      const earnings = randInt(0, budget * 3); // Random box office\n      const movie = {\n        id: `${producer.id}-${state.year}`,\n        title: generateMovieTitle(producer.name, state.year),\n        producerId: producer.id,\n        producerName: producer.name,\n        year: state.year,\n        budget,\n        earnings,\n      };\n      movies.push(movie);\n      producer.movies.push(movie);\n      producer.wealth += (earnings - budget);\n      producer.netWorthHistory.push(producer.wealth);\n    } else {\n      producer.netWorthHistory.push(producer.wealth);\n    }\n  });\n\n  // Oscar selection: Top earning movie\n  let oscarWinner = null;\n  if (movies.length > 0) {\n    oscarWinner = movies.reduce((best, curr) => (curr.earnings > best.earnings ? curr : best), movies[0]);\n    let winnerProducer = producers.find(p => p.id === oscarWinner.producerId);\n    if (winnerProducer) winnerProducer.oscars += 1;\n    news.push({\n      type: \"oscar\",\n      text: `🏆 Oscar Winner: \"${oscarWinner.title}\" by ${oscarWinner.producerName} (${oscarWinner.earnings.toLocaleString()} INR)`,\n      year: state.year,\n    });\n  }\n\n  // News: Top flop, top hit, richest producer\n  if (movies.length > 0) {\n    const topHit = movies.reduce((a, b) => (a.earnings > b.earnings ? a : b));\n    const topFlop = movies.reduce((a, b) => (a.earnings < b.earnings ? a : b));\n    news.push({\n      type: \"hit\",\n      text: `🔥 Blockbuster: \"${topHit.title}\" earned ${topHit.earnings.toLocaleString()} INR!`,\n      year: state.year,\n    });\n    news.push({\n      type: \"flop\",\n      text: `💸 Flop: \"${topFlop.title}\" earned only ${topFlop.earnings.toLocaleString()} INR.`,\n      year: state.year,\n    });\n  }\n\n  const richest = producers.reduce((a, b) => (a.wealth > b.wealth ? a : b));\n  news.push({\n    type: \"richest\",\n    text: `💰 Richest Producer: ${richest.name} (${richest.wealth.toLocaleString()} INR)`,\n    year: state.year,\n  });\n\n  return {\n    movies,\n    oscars: oscarWinner,\n    news,\n    producers,\n  };\n}\n\n// end of code\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}